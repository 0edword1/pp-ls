/// <reference types="node" />
/// <reference types="node" />
import type { WriteFileOptions } from 'fs';
import chokidar, { WatchOptions } from 'chokidar';
import BlueBirdPromise from 'bluebird';
export declare function exists(path: string): BlueBirdPromise<any>;
export declare function existsSync(path: string): boolean;
export declare function mkdirs(path: string): BlueBirdPromise<any>;
export declare function mkdirsSync(path: string): void;
export declare function writeFile(path: string, data: any, options?: WriteFileOptions): BlueBirdPromise<any>;
export declare function writeFileSync(path: string, data: any, options?: WriteFileOptions): void;
export declare function appendFile(path: string, data: any, options?: WriteFileOptions): BlueBirdPromise<any>;
export declare function appendFileSync(path: string, data: any, options?: WriteFileOptions): void;
export declare function copyFile(src: string, dest: string, flags?: number): BlueBirdPromise<any>;
export declare type ReadDirOptions = {
    encoding?: BufferEncoding | null;
    withFileTypes?: false;
    ignoreHidden?: boolean;
    ignorePattern?: RegExp;
};
export declare function copyDir(src: string, dest: string, options?: ReadDirOptions): BlueBirdPromise<any[]>;
export declare function listDir(path: string, options?: ReadDirOptions): BlueBirdPromise<any[]>;
export declare function listDirSync(path: string, options?: ReadDirOptions): any[];
export declare function escapeEOL(str: string): string;
export declare function escapeBOM(str: string): string;
export declare function escapeFileContent(content: any): string;
export declare type ReadFileOptions = {
    encoding?: BufferEncoding | null;
    flag?: string;
    escape?: string;
};
export declare function readFile(path: string, options?: ReadFileOptions | null): BlueBirdPromise<any>;
export declare function readFileSync(path: string, options?: ReadFileOptions): any;
export declare function emptyDir(path: string, options?: ReadDirOptions & {
    exclude?: any[];
}): BlueBirdPromise<any[]>;
export declare function emptyDirSync(path: string, options?: ReadDirOptions & {
    exclude?: any[];
}): any[];
export declare function rmdir(path: string): BlueBirdPromise<any>;
export declare function rmdirSync(path: string): void;
export declare function watch(path: string | ReadonlyArray<string>, options?: WatchOptions): BlueBirdPromise<chokidar.FSWatcher>;
export declare function ensurePath(path: string): BlueBirdPromise<string>;
export declare function ensurePathSync(path: string): string;
export declare function ensureWriteStream(path: string, options?: BufferEncoding | {
    flags?: string;
    encoding?: BufferEncoding;
    fd?: number;
    mode?: number;
    autoClose?: boolean;
    emitClose?: boolean;
    start?: number;
    highWaterMark?: number;
}): BlueBirdPromise<any>;
export declare function ensureWriteStreamSync(path: string, options?: BufferEncoding | {
    flags?: string;
    encoding?: BufferEncoding;
    fd?: number;
    mode?: number;
    autoClose?: boolean;
    emitClose?: boolean;
    start?: number;
    highWaterMark?: number;
}): any;
export declare const access: () => BlueBirdPromise<unknown>;
export declare const accessSync: any;
export declare const chmod: () => BlueBirdPromise<unknown>;
export declare const chmodSync: any;
export declare const fchmod: () => BlueBirdPromise<unknown>;
export declare const fchmodSync: any;
export declare const lchmod: () => BlueBirdPromise<unknown>;
export declare const lchmodSync: any;
export declare const chown: () => BlueBirdPromise<unknown>;
export declare const chownSync: any;
export declare const fchown: () => BlueBirdPromise<unknown>;
export declare const fchownSync: any;
export declare const lchown: () => BlueBirdPromise<unknown>;
export declare const lchownSync: any;
export declare const close: () => BlueBirdPromise<unknown>;
export declare const closeSync: any;
export declare const createReadStream: any;
export declare const createWriteStream: any;
export declare const fsync: () => BlueBirdPromise<unknown>;
export declare const fsyncSync: any;
export declare const link: () => BlueBirdPromise<unknown>;
export declare const linkSync: any;
export declare const mkdir: () => BlueBirdPromise<unknown>;
export declare const mkdirSync: any;
export declare const open: () => BlueBirdPromise<unknown>;
export declare const openSync: any;
export declare const symlink: () => BlueBirdPromise<unknown>;
export declare const symlinkSync: any;
export declare const read: () => BlueBirdPromise<unknown>;
export declare const readSync: any;
export declare const readdir: (arg1: fs.PathLike) => BlueBirdPromise<string[]>;
export declare const readdirSync: any;
export declare const readlink: () => BlueBirdPromise<unknown>;
export declare const readlinkSync: any;
export declare const realpath: () => BlueBirdPromise<unknown>;
export declare const realpathSync: any;
export declare const rename: (arg1: fs.PathLike, arg2: fs.PathLike) => BlueBirdPromise<void>;
export declare const renameSync: any;
export declare const stat: (arg1: fs.PathLike) => BlueBirdPromise<fs.Stats>;
export declare const statSync: any;
export declare const fstat: () => BlueBirdPromise<unknown>;
export declare const fstatSync: any;
export declare const lstat: () => BlueBirdPromise<unknown>;
export declare const lstatSync: any;
export declare const truncate: () => BlueBirdPromise<unknown>;
export declare const truncateSync: any;
export declare const ftruncate: () => BlueBirdPromise<unknown>;
export declare const ftruncateSync: any;
export declare const unlink: (arg1: fs.PathLike) => BlueBirdPromise<void>;
export declare const unlinkSync: any;
export declare const utimes: () => BlueBirdPromise<unknown>;
export declare const utimesSync: any;
export declare const futimes: () => BlueBirdPromise<unknown>;
export declare const futimesSync: any;
export declare const watchFile: any;
export declare const unwatchFile: any;
export declare const write: () => BlueBirdPromise<unknown>;
export declare const writeSync: any;
export declare const Stats: any;
export declare const ReadStream: any;
export declare const WriteStream: any;
